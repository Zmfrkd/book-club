import streamlit as st
import requests
import json
import os




DATA_FILE = "users_data.json"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

import os
import streamlit as st
import requests

@st.cache_data(ttl=86400)  # –∫—ç—à–∏—Ä—É–µ–º —Å—É—Ç–∫–∏
def get_book_info(title: str):
    api_key = st.secrets.get("GOOGLE_BOOKS_API_KEY") or os.getenv("GOOGLE_BOOKS_API_KEY")

    def try_google(q: str):
        params = {
            "q": q,
            "maxResults": 30,
            "printType": "books",
            "orderBy": "relevance",
            "langRestrict": "ru",
        }
        PROXY_URL = "https://googlebooks-proxy.onrender.com/books"
        r = requests.get(PROXY_URL, params=params, timeout=12)
        r.raise_for_status()

        items = r.json().get("items", []) or []
        for it in items:
            v = it.get("volumeInfo", {}) or {}
            pc = v.get("pageCount")
            if isinstance(pc, int) and pc > 0:
                return {
                    "title": v.get("title", q),
                    "author": ", ".join(v.get("authors", [])) if v.get("authors") else "",
                    "description": v.get("description", "") or "",
                    "pageCount": pc,
                    "thumbnail": (v.get("imageLinks") or {}).get("thumbnail", "") or ""
                }
        return None


    # 1) Google Books
    try:
        for q in (f'intitle:"{title}"', title):
            res = try_google(q)
            if res:
                return res
    except requests.HTTPError as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ Google Books HTTP: {e}")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ Google Books: {e}")

    # 2) Open Library fallback
    try:
        r = requests.get("https://openlibrary.org/search.json", params={"title": title}, timeout=10)
        r.raise_for_status()
        docs = r.json().get("docs", []) or []

        # –û—Ç–ª–∞–¥–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
        st.sidebar.subheader("üìö Open Library API")
        st.sidebar.write("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", {"title": title})
        st.sidebar.write("HTTP —Å—Ç–∞—Ç—É—Å:", r.status_code)
        st.sidebar.json(docs)

        for d in docs:
            n = d.get("number_of_pages_median") or d.get("number_of_pages")
            if isinstance(n, int) and n > 0:
                return {
                    "title": d.get("title", title),
                    "author": ", ".join(d.get("author_name", [])) if d.get("author_name") else "",
                    "description": "",
                    "pageCount": n,
                    "thumbnail": ""
                }
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ Open Library: {e}")

    return None


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
def _keys_for_idx(idx):
    return (f"read_num_{idx}", f"read_slider_{idx}")

def sync_from_num(idx, total):
    num_key, slider_key = _keys_for_idx(idx)
    # clamp –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    v = int(st.session_state[num_key])
    v = max(0, min(int(total), v))
    st.session_state[num_key] = v
    st.session_state[slider_key] = v

def sync_from_slider(idx):
    num_key, slider_key = _keys_for_idx(idx)
    st.session_state[num_key] = int(st.session_state[slider_key])

# --- Streamlit UI ---
st.set_page_config(page_title="–ö–Ω–∏–∂–Ω—ã–π –∫–ª—É–±", layout="centered")

st.markdown("""
    <style>
    body { background-color: #CACAC7; color: #262626; }
    .stButton>button { background-color: #ddf62b; color: #262626; font-weight: bold; border-radius: 10px; }
    [data-baseweb="input"] input, .stTextInput input { color:#262626 !important; }
    </style>
    """, unsafe_allow_html=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if "user" not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è.")
    st.stop()

user = st.session_state["user"]
all_users_data = load_user_data()
if user not in all_users_data:
    all_users_data[user] = []

st.session_state.user_books = all_users_data[user]

st.title(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {user}")

# --- –†–µ–∂–∏–º—ã —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ---
if "manual_entry_mode" not in st.session_state:
    st.session_state.manual_entry_mode = False

if "manual_full_entry_mode" not in st.session_state:
    st.session_state.manual_full_entry_mode = False

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ API ---
st.subheader("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")

with st.form("add_book_form"):
    book_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
    submitted = st.form_submit_button("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")

    if submitted and book_title.strip():
        if any(book.get("title","").lower() == book_title.strip().lower() for book in st.session_state.user_books):
            st.warning("‚ùó –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            book_info = get_book_info(book_title)
            if book_info is None or book_info["pageCount"] == 0:
                st.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ.")
                st.session_state.manual_entry_mode = True
                st.session_state.pending_title = book_title.strip()
            else:
                st.session_state.user_books.append({
                    "title": book_info["title"],
                    "author": book_info["author"],
                    "description": book_info["description"],
                    "thumbnail": book_info["thumbnail"],
                    "total": int(book_info["pageCount"]),
                    "read": 0,
                    "pages_source": "api"
                })
                all_users_data[user] = st.session_state.user_books
                save_user_data(all_users_data)
                st.success(f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{book_info['title']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ ({book_info['pageCount']} —Å—Ç—Ä.)")

# --- –ö–Ω–æ–ø–∫–∞: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
st.markdown("---")
if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤—Ä—É—á–Ω—É—é"):
    st.session_state.manual_full_entry_mode = True

# --- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–µ—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª) ---
if st.session_state.manual_entry_mode:
    manual_pages = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ä—É—á–Ω—É—é", min_value=1, max_value=3000, step=1)
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"):
        title = st.session_state.get("pending_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        st.session_state.user_books.append({
            "title": title,
            "total": int(manual_pages),
            "read": 0,
            "pages_source": "manual"
        })
        all_users_data[user] = st.session_state.user_books
        save_user_data(all_users_data)
        st.success(f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ ({int(manual_pages)} —Å—Ç—Ä.)")
        st.session_state.manual_entry_mode = False

# --- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ ---
if st.session_state.manual_full_entry_mode:
    st.subheader("üìò –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–Ω–∏–≥–∏")

    with st.form("manual_full_form"):
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", key="manual_title")
        author = st.text_input("–ê–≤—Ç–æ—Ä", key="manual_author")
        total = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü", min_value=1, max_value=3000, step=1, key="manual_total")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", key="manual_desc")
        submitted_manual = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")

        if submitted_manual and title.strip():
            st.session_state.user_books.append({
                "title": title.strip(),
                "author": author.strip(),
                "description": description.strip(),
                "thumbnail": "",
                "total": int(total),
                "read": 0,
                "pages_source": "manual"
            })
            all_users_data[user] = st.session_state.user_books
            save_user_data(all_users_data)
            st.success(f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
            st.session_state.manual_full_entry_mode = False

# --- –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
st.subheader("–ú–æ–∏ –∫–Ω–∏–≥–∏")

if st.session_state.user_books:
    for idx, book in enumerate(st.session_state.user_books):
        title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        read = int(book.get("read", 0))
        total = int(book.get("total", 1))
        percent = int((read / total) * 100) if total else 0
        is_finished = read >= total
        bg_color = "#ddf62b" if is_finished else "#f2f2f2"

        with st.container():
            col1, col2 = st.columns([5, 2])
            with col1:
                st.markdown(f"""
                    <div style="padding: 10px; background-color: {bg_color}; border-radius: 10px;">
                        <b>{title}</b><br>
                        {read} / {total} —Å—Ç—Ä. ({percent}%)
                    </div>
                """, unsafe_allow_html=True)

                if book.get("thumbnail"):
                    st.image(book["thumbnail"], width=100)
                if book.get("author"):
                    st.markdown(f"–ê–≤—Ç–æ—Ä: _{book['author']}_")
                if book.get("description"):
                    st.markdown(f"<div style='font-size:12px'>{book['description'][:300]}...</div>", unsafe_allow_html=True)

                # --- –°–ò–ù–•–†–û–ù–ù–´–ô –ü–†–û–ì–†–ï–°–°: number_input <-> slider ---
                num_key, slider_key = _keys_for_idx(idx)
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if num_key not in st.session_state:
                    st.session_state[num_key] = read
                if slider_key not in st.session_state:
                    st.session_state[slider_key] = read

                # –†–∏—Å—É–µ–º –¥–≤–∞ –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∫–æ–ª–ª–±—ç–∫–∞–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                pg_col1, pg_col2 = st.columns([2, 5])
                with pg_col1:
                    st.number_input(
                        "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ (–≤–≤–µ—Å—Ç–∏)",
                        min_value=0, max_value=total, step=1,
                        key=num_key,
                        on_change=sync_from_num,
                        args=(idx, total)
                    )
                with pg_col2:
                    st.slider(
                        "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å)",
                        min_value=0, max_value=total, step=1,
                        key=slider_key,
                        on_change=sync_from_slider,
                        args=(idx,)
                    )

                # –µ–¥–∏–Ω–æ–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                new_value = int(st.session_state[slider_key])
                if new_value != read:
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–Ω–∏–≥—É
                    book["read"] = new_value
                    all_users_data[user] = st.session_state.user_books
                    save_user_data(all_users_data)
                    read = new_value
                    percent = int((read / total) * 100) if total else 0

                st.progress(percent)

            with col2:
                # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑ API) ---
                with st.expander("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
                    new_total = st.number_input(
                        "–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü",
                        min_value=1, max_value=3000, step=1, value=total,
                        key=f"total_edit_{idx}"
                    )
                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã", key=f"save_total_{idx}"):
                        book["total"] = int(new_total)
                        book["pages_source"] = "manual"  # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Ä—É—á–Ω—É—é
                        # –ü–æ–¥—Ä–µ–∑–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–ª –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ
                        if book["read"] > book["total"]:
                            book["read"] = book["total"]
                            # –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º UI-–≤–∏–¥–∂–µ—Ç—ã
                            num_key, slider_key = _keys_for_idx(idx)
                            st.session_state[num_key] = int(book["read"])
                            st.session_state[slider_key] = int(book["read"])
                        all_users_data[user] = st.session_state.user_books
                        save_user_data(all_users_data)
                        st.success("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

                # --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ ---
                if st.button("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", key=f"del_{idx}"):
                    # —á–∏—Å—Ç–∏–º —Å—Ç–µ–π—Ç –≤–∏–¥–∂–µ—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏ –∫–ª—é—á–∏
                    num_key, slider_key = _keys_for_idx(idx)
                    if num_key in st.session_state: del st.session_state[num_key]
                    if slider_key in st.session_state: del st.session_state[slider_key]
                    del st.session_state.user_books[idx]
                    all_users_data[user] = st.session_state.user_books
                    save_user_data(all_users_data)
                    st.rerun()
else:
    st.info("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏.")

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

total_read = sum(int(b.get("read", 0)) for b in st.session_state.user_books)
total_books = len(st.session_state.user_books)
finished_books = sum(1 for b in st.session_state.user_books if int(b.get("read", 0)) >= int(b.get("total", 1)))

st.markdown(f"**–í—Å–µ–≥–æ –∫–Ω–∏–≥:** {total_books}")
st.markdown(f"**–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü:** {total_read}")
st.markdown(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–Ω–∏–≥:** {finished_books}")
